No need to create a summary or a list of changes. Do not use emojis. 
Do not use marketing language or words like comprehensive.

For for all classes and functions in: /transport/continuous/liquid/ 
create, add or modify in this order:

1. add describe(self) -> dict:
        """
        Introspect metadata for documentation and algorithm querying.
        
        Returns:
            dict: Comprehensive metadata about the PeristalticFlow model including
                  algorithms, parameters, equations, and usage information.
        """

2. One Documentation file (*_documentation.md), describing the use case,
and explains the algorithm, parameters, equations, 
and usage. Add proven acceptable working ranges. 
Add literature references.

3. One Test file with meaningful test cases (*_test.py). Scope are
atomatic tests for the class or function. Do not create mock tests.
Tests should cover all methods and edge cases.
Use pytest framework. Include assertions to verify expected behavior.
Use pytest fixtures for setup and teardown if needed.

4. One code Example file (*_example.py) based on test and documentation. 
The code should be executable and demonstrate the use of the class or function.
It should produce output that can be verified. 

5. Output files (*_example.out): âœ… Generated from running code examples

6. Single Image files (*_example_plots.png, *_detailed_analysis.png), 
Created for visualizations. Do not group, figures should be standalone.

7. Based on documentation, code example, output.out and the images create a
RST file (*.rst) for Sphinx documentation

8. Finally copy the *.rst and all files that are referenced in rst 
(images, out) to the 
documentation folder, if not preset the folder will be created.
Only copy the files that are needed for the documentation.
The folder should be named after the class or function,
and should follow the structure of the documentation
   (e.g. /docs/source/transport/continuous/liquid/).   
